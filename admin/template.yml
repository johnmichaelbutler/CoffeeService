AWSTemplateFormatVersion: 2010-09-09
Description: >-
  admin
Transform:
- AWS::Serverless-2016-10-31
Resources:
  coffeeServiceAdminApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Dev
      Cors:
        AllowHeaders: "'*'"
        AllowMethods: "'*'"
        AllowOrigin: "'*'"
  # Poll Queue Function
  pollSQSFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/poll-SQS.handlePollSQS
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Function that polls SQS queue for Orders
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
        - EventBridgePutEventsPolicy:
            EventBusName: CoffeeServiceEventBus
        - SQSPollerPolicy:
            QueueName: !Ref adminSQSQueue
      Environment:
        Variables:
          EVENT_BUS: CoffeeServiceEventBus
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref coffeeServiceAdminApi

  # Handle Events Function
  handleEventsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/built/handlers/handle-event.handleEventsHandler
      Runtime: nodejs12.x
      CodeUri:
      DeadLetterQueue:
      Description: Function that handles events from EventBus
      MemorySize: 128
      Timeout: 100
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PaymentsTable
        - EventBridgePutEventsPolicy:
            EventBusName: CoffeeServiceEventBus
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref PaymentsTable
          EVENT_BUS: CoffeeServiceEventBus
      Events:
        HandlePaymentEventsRule:
          Type: EventBridgeRule
          Properties:
            EventBusName: CoffeeServiceEventBus
            Pattern:
              source:
                - 'CoffeeService.orders'
                - 'CoffeeService.payments'

  # DynamoDB Table
  AdminTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: order_id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  # SQS Queue
  adminSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: AdminQueue.fifo
      FifoQueue: true

  # SQS Queue Policy
  # Allow EventBridge to invoke SQS
  EventBridgeToToSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: SQS:SendMessage
          Resource:  !GetAtt adminSQSQueue.Arn
      Queues:
        - Ref: adminSQSQueue

  # Event Rule
  # Define the event rule to filter for events that trigger action
  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventRule"
      EventPattern:
        source:
          - "CoffeeService.orders"
          - "CoffeeService.payments"
        detail-type:
          - "preparing"
      Targets:
        - Arn: !GetAtt adminSQSQueue.Arn
          Id: "adminSQSQueue"



Outputs:
  SQSqueueName:
    Description: SNS queue name
    Value: !GetAtt adminSQSQueue.QueueName

  SQSqueueARN:
    Description: SQS queue ARN
    Value: !GetAtt adminSQSQueue.Arn

  SQSqueueURL:
    Description: SQS queue URL
    Value: !Ref adminSQSQueue

